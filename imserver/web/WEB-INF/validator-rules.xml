<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
	<!--

		This file contains the default Struts Validator pluggable validator
		definitions. It should be placed somewhere under /WEB-INF and
		referenced in the struts-config.xml under the plug-in element for the
		ValidatorPlugIn. <plug-in
		className="org.apache.struts.validator.ValidatorPlugIn"> <set-property
		property="pathnames" value="/WEB-INF/validator-rules.xml,
		/WEB-INF/validation.xml"/> </plug-in> These are the default error
		messages associated with each validator defined in this file. They
		should be added to your projects ApplicationResources.properties file
		or you can associate new ones by modifying the pluggable validators
		msg attributes in this file. # Struts Validator Error Messages
		errors.required={0} is required. errors.minlength={0} can not be less
		than {1} characters. errors.maxlength={0} can not be greater than {1}
		characters. errors.invalid={0} is invalid. errors.byte={0} must be a
		byte. errors.short={0} must be a short. errors.integer={0} must be an
		integer. errors.long={0} must be a long. errors.float={0} must be a
		float. errors.double={0} must be a double. errors.date={0} is not a
		date. errors.range={0} is not in the range {1} through {2}.
		errors.creditcard={0} is an invalid credit card number.
		errors.email={0} is an invalid e-mail address.
	-->

<form-validation>

	<global>

		<validator name="required" classname="org.apache.struts.validator.FieldChecks"
			method="validateRequired"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
			msg="errors.required">

			<javascript><![CDATA[
            function validateRequired(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = form.getAttributeNode("name");
                oRequired = eval('new ' + formName.value + '_required()');
                for (x in oRequired) {
                	var field = form[oRequired[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'file' ||
                        field.type == 'select-one' ||
                        field.type == 'radio' ||
                        field.type == 'password') {

	                        var value = '';
							// get field's value
							if (field.type == "select-one") {
								var si = field.selectedIndex;
								if (si >= 0) {
									value = field.options[si].value;
								}
							} 
							else {
								value = field.value;
							}
	
	                        if (trim(value).length == 0) {
		                        if (i == 0) {
		                            focusField = field;
		                        }
		                        fields[i++] = oRequired[x][1];
		                        isValid = false;
	                        }
                    	}
                	}
	                if (fields.length > 0) {
	                   focusField.focus();
	                   alert(fields.join('\n'));
	                }
	                
                	return isValid;
            	}

	            // Trim whitespace from left and right sides of s.
	            function trim(s) {
	                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            	}]]>
			</javascript>

		</validator>

		<validator name="requiredif" classname="org.apache.struts.validator.FieldChecks"
			method="validateRequiredIf"
			methodParams="java.lang.Object,
                               org.apache.commons.validator.ValidatorAction,
                               org.apache.commons.validator.Field,
                               org.apache.struts.action.ActionMessages,
                               org.apache.commons.validator.Validator,
                               javax.servlet.http.HttpServletRequest"
			msg="errors.required">
		</validator>

		<validator name="minlength" classname="org.apache.struts.validator.FieldChecks"
			method="validateMinLength"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.minlength">

			<javascript><![CDATA[
            function validateMinLength(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = form.getAttributeNode("name");
        		oMinLength = eval('new ' + formName.value + '_minlength()');
                for (x in oMinLength) {
                    var field = form[oMinLength[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'password') {

                        var iMin = parseInt(oMinLength[x][2]("minlength"));
                        if ((trim(field.value).length > 0) && (field.value.length < iMin)) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMinLength[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }]]>
			</javascript>

		</validator>


		<validator name="maxlength" classname="org.apache.struts.validator.FieldChecks"
			method="validateMaxLength"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.maxlength">

			<javascript><![CDATA[
            function validateMaxLength(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = form.getAttributeNode("name");
       			oMaxLength = eval('new ' + formName.value + '_maxlength()');
                for (x in oMaxLength) {
                    var field = form[oMaxLength[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'password') {

                        var iMax = parseInt(oMaxLength[x][2]("maxlength"));
                        if (field.value.length > iMax) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMaxLength[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }]]>
			</javascript>

		</validator>


		<validator name="mask" classname="org.apache.struts.validator.FieldChecks"
			method="validateMask"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.invalid">

			<javascript><![CDATA[
            function validateMask(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = form.getAttributeNode("name");
        		oMasked = eval('new ' + formName.value + '_mask()');
                for (x in oMasked) {
                    var field = form[oMasked[x][0]];

                    if ((field.type == 'text' ||
                         field.type == 'textarea' ||
                        field.type == 'password') &&
                         (field.value.length > 0)) {

                        if (!matchPattern(field.value, oMasked[x][2]("mask"))) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMasked[x][1];
                            isValid = false;
                        }
                    }
                }

                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }

            function matchPattern(value, mask) {
               return mask.exec(value);
            }]]>
			</javascript>

		</validator>


		<validator name="byte" classname="org.apache.struts.validator.FieldChecks"
			method="validateByte"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.byte" jsFunctionName="ByteValidations">

		</validator>


		<validator name="short" classname="org.apache.struts.validator.FieldChecks"
			method="validateShort"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.short" jsFunctionName="ShortValidations">

		</validator>


		<validator name="integer" classname="org.apache.struts.validator.FieldChecks"
			method="validateInteger"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.integer" jsFunctionName="IntegerValidations">

		</validator>


		<validator name="double" classname="org.apache.struts.validator.FieldChecks"
			method="validateDouble"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                     
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.double" />


		<validator name="date" classname="org.apache.struts.validator.FieldChecks"
			method="validateDate"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.date" jsFunctionName="DateValidations">

			<javascript><![CDATA[
            ]]>
			</javascript>
		</validator>

		<!-- range is deprecated use intRange instead -->
		<validator name="range" classname="org.apache.struts.validator.FieldChecks"
			method="validateIntRange"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="integer" msg="errors.range">

		</validator>

		<validator name="intRange" classname="org.apache.struts.validator.FieldChecks"
			method="validateIntRange"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="integer" msg="errors.range">

		</validator>



		<validator name="floatRange" classname="org.apache.struts.validator.FieldChecks"
			method="validateFloatRange"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="float" msg="errors.range">

		</validator>

		<validator name="creditCard" classname="org.apache.struts.validator.FieldChecks"
			method="validateCreditCard"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.creditcard">

		</validator>


		<validator name="email" classname="org.apache.struts.validator.FieldChecks"
			method="validateEmail"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,                       
                       javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.email">

			<javascript><![CDATA[
            function validateEmail(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var formName = form.getAttributeNode("name");
        		oEmail = eval('new ' + formName.value + '_email()');
                for (x in oEmail) {
                    if ((form[oEmail[x][0]].type == 'text' ||
                         form[oEmail[x][0]].type == 'textarea') &&
                        (form[oEmail[x][0]].value.length > 0)) {
                        if (!checkEmail(form[oEmail[x][0]].value)) {
                            if (i == 0) {
                                focusField = form[oEmail[x][0]];
                            }
                            fields[i++] = oEmail[x][1];
                            bValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }

            /**
             * Reference: Sandeep V. Tamhankar (stamhankar@hotmail.com),
             * http://javascript.internet.com
             */
            function checkEmail(emailStr) {
               if (emailStr.length == 0) {
                   return true;
               }
               var emailPat=/^(.+)@(.+)$/;
               var specialChars="\\(\\)<>@,;:\\\\\\\"\\.\\[\\]";
               var validChars="\[^\\s" + specialChars + "\]";
               var quotedUser="(\"[^\"]*\")";
               var ipDomainPat=/^(\d{1,3})[.](\d{1,3})[.](\d{1,3})[.](\d{1,3})$/;
               var atom=validChars + '+';
               var word="(" + atom + "|" + quotedUser + ")";
               var userPat=new RegExp("^" + word + "(\\." + word + ")*$");
               var domainPat=new RegExp("^" + atom + "(\\." + atom + ")*$");
               var matchArray=emailStr.match(emailPat);
               if (matchArray == null) {
                   return false;
               }
               var user=matchArray[1];
               var domain=matchArray[2];
               if (user.match(userPat) == null) {
                   return false;
               }
               var IPArray = domain.match(ipDomainPat);
               if (IPArray != null) {
                   for (var i = 1; i <= 4; i++) {
                      if (IPArray[i] > 255) {
                         return false;
                      }
                   }
                   return true;
               }
               var domainArray=domain.match(domainPat);
               if (domainArray == null) {
                   return false;
               }
               var atomPat=new RegExp(atom,"g");
               var domArr=domain.match(atomPat);
               var len=domArr.length;
               if ((domArr[domArr.length-1].length < 2) ||
                   (domArr[domArr.length-1].length > 3)) {
                   return false;
               }
               if (len < 2) {
                   return false;
               }
               return true;
            }]]>
			</javascript>

		</validator>

		<validator name="twofields" classname="com.fulong.lyvc.manage.base.ValidationUtil"
			method="validateTwoFields"
			methodParams="java.lang.Object,
				org.apache.commons.validator.ValidatorAction,
				org.apache.commons.validator.Field,
				org.apache.struts.action.ActionMessages,
				org.apache.commons.validator.Validator,
				javax.servlet.http.HttpServletRequest"
			depends="" msg="errors.twofields">
			
		</validator>

	</global>

</form-validation>
