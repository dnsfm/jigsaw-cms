///////////////////////////////
// Message definition file
// Generated by lyvc Message
///////////////////////////////

#include "stdafx.h"
#include "ServerInfo.h"

string LyvcMessage::ServerInfo::toXML()
{
	const int BUFFERSIZE=64;
	char buffer[BUFFERSIZE];
	string xml;
	xml = xml + "<lyvcmessage>";
	xml = xml + "<id>";
	_snprintf(buffer, BUFFERSIZE, "%I32d", id);
	xml = xml + buffer;
	xml = xml + "</id>";
	xml = xml + "<_senderid>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->_senderId);
	xml = xml + buffer;
	xml = xml + "</_senderid>";
	xml = xml + "<_conferenceid>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->_conferenceId);
	xml = xml + buffer;
	xml = xml + "</_conferenceid>";
	xml = xml + "<domain>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->domain);
	xml = xml + "</domain>";
	xml = xml + "<DeleteConferenceURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->DeleteConferenceURL);
	xml = xml + "</DeleteConferenceURL>";
	xml = xml + "<CreateConferenceNoticeURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->CreateConferenceNoticeURL);
	xml = xml + "</CreateConferenceNoticeURL>";
	xml = xml + "<CreateBulletinURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->CreateBulletinURL);
	xml = xml + "</CreateBulletinURL>";
	xml = xml + "<EditConferenceURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->EditConferenceURL);
	xml = xml + "</EditConferenceURL>";
	xml = xml + "<CommonContactMgrURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->CommonContactMgrURL);
	xml = xml + "</CommonContactMgrURL>";
	xml = xml + "<ConferenceModeMgrURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->ConferenceModeMgrURL);
	xml = xml + "</ConferenceModeMgrURL>";
	xml = xml + "<SystemRoleMgrURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->SystemRoleMgrURL);
	xml = xml + "</SystemRoleMgrURL>";
	xml = xml + "<CreateFormalConferenceURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->CreateFormalConferenceURL);
	xml = xml + "</CreateFormalConferenceURL>";
	xml = xml + "<SelfInfoMgrURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->SelfInfoMgrURL);
	xml = xml + "</SelfInfoMgrURL>";
	xml = xml + "<UserRegisterURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->UserRegisterURL);
	xml = xml + "</UserRegisterURL>";
	xml = xml + "<ClientDownloadURL>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->ClientDownloadURL);
	xml = xml + "</ClientDownloadURL>";
	xml = xml + "</lyvcmessage>";
	return xml;
}

bool LyvcMessage::ServerInfo::fromXML(string& xmlString)
{
	string tagContent;
	
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "_senderid");
	if(tagContent == ""){
		return false;
	}
	this->_senderId = _atoi64(tagContent.c_str());
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "_conferenceid");
	if(tagContent == ""){
		return false;
	}
	this->_conferenceId = _atoi64(tagContent.c_str());
	this->DeleteConferenceURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "DeleteConferenceURL"));
	this->CreateConferenceNoticeURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "CreateConferenceNoticeURL"));
	this->CreateBulletinURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "CreateBulletinURL"));
	this->EditConferenceURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "EditConferenceURL"));
	this->CommonContactMgrURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "CommonContactMgrURL"));
	this->ConferenceModeMgrURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "ConferenceModeMgrURL"));
	this->SystemRoleMgrURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "SystemRoleMgrURL"));
	this->CreateFormalConferenceURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "CreateFormalConferenceURL"));
	this->SelfInfoMgrURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "SelfInfoMgrURL"));
	this->UserRegisterURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "UserRegisterURL"));
	this->ClientDownloadURL = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "ClientDownloadURL"));
	this->domain = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "domain"));
	return true;
}


