///////////////////////////////
// Message definition file
// Generated by lyvc Message
///////////////////////////////

#include "stdafx.h"
#include "ConferenceModelRoleTableItem.h"

string LyvcMessage::ConferenceModelRoleTableItem::toXML()
{
	const int BUFFERSIZE=64;
	char buffer[BUFFERSIZE];
	string xml;
	xml = xml + "<lyvcmessage>";
	xml = xml + "<id>";
	_snprintf(buffer, BUFFERSIZE, "%I32d", id);
	xml = xml + buffer;
	xml = xml + "</id>";
	xml = xml + "<_senderid>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->_senderId);
	xml = xml + buffer;
	xml = xml + "</_senderid>";
	xml = xml + "<_conferenceid>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->_conferenceId);
	xml = xml + buffer;
	xml = xml + "</_conferenceid>";
	xml = xml + "<modelId>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->modelId);
	xml = xml + buffer;
	xml = xml + "</modelId>";
	xml = xml + "<roleId>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->roleId);
	xml = xml + buffer;
	xml = xml + "</roleId>";
	xml = xml + "<roleName>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->roleName);
	xml = xml + "</roleName>";
	xml = xml + "<rights>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->rights);
	xml = xml + "</rights>";
	xml = xml + "</lyvcmessage>";
	return xml;
}

bool LyvcMessage::ConferenceModelRoleTableItem::fromXML(string& xmlString)
{
	string tagContent;
	
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "_senderid");
	if(tagContent == ""){
		return false;
	}
	this->_senderId = _atoi64(tagContent.c_str());
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "_conferenceid");
	if(tagContent == ""){
		return false;
	}
	this->_conferenceId = _atoi64(tagContent.c_str());
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "modelId");
	if(tagContent == ""){
		return false;
	}
	this->modelId = _atoi64(tagContent.c_str());
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "roleId");
	if(tagContent == ""){
		return false;
	}
	this->roleId = _atoi64(tagContent.c_str());
	this->roleName = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "roleName"));
	this->rights = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "rights"));
	return true;
}


