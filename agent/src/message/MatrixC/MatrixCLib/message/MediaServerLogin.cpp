///////////////////////////////
// Message definition file
// Generated by lyvc Message
///////////////////////////////

#include "stdafx.h"
#include "MediaServerLogin.h"

string LyvcMessage::MediaServerLogin::toXML()
{
	const int BUFFERSIZE=64;
	char buffer[BUFFERSIZE];
	string xml;
	xml = xml + "<lyvcmessage>";
	xml = xml + "<id>";
	_snprintf(buffer, BUFFERSIZE, "%I32d", id);
	xml = xml + buffer;
	xml = xml + "</id>";
	xml = xml + "<_senderid>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->_senderId);
	xml = xml + buffer;
	xml = xml + "</_senderid>";
	xml = xml + "<_conferenceid>";
	_snprintf(buffer, BUFFERSIZE, "%I64d", this->_conferenceId);
	xml = xml + buffer;
	xml = xml + "</_conferenceid>";
	xml = xml + "<domain>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->domain);
	xml = xml + "</domain>";
	xml = xml + "<udpPort>";
	_snprintf(buffer, BUFFERSIZE, "%I32d", this->udpPort);
	xml = xml + buffer;
	xml = xml + "</udpPort>";
	xml = xml + "<tcpPort>";
	_snprintf(buffer, BUFFERSIZE, "%I32d", this->tcpPort);
	xml = xml + buffer;
	xml = xml + "</tcpPort>";
	xml = xml + "<ip>";
	xml = xml + BaseMessage::encodeHtmlEscape(this->ip);
	xml = xml + "</ip>";
	xml = xml + "</lyvcmessage>";
	return xml;
}

bool LyvcMessage::MediaServerLogin::fromXML(string& xmlString)
{
	string tagContent;
	
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "_senderid");
	if(tagContent == ""){
		return false;
	}
	this->_senderId = _atoi64(tagContent.c_str());
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "_conferenceid");
	if(tagContent == ""){
		return false;
	}
	this->_conferenceId = _atoi64(tagContent.c_str());
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "udpPort");
	if(tagContent == ""){
		return false;
	}
	this->udpPort = atoi(tagContent.c_str());
	tagContent = BaseMessage::getStringBetweenTag(xmlString, "tcpPort");
	if(tagContent == ""){
		return false;
	}
	this->tcpPort = atoi(tagContent.c_str());
	this->ip = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "ip"));
	this->domain = BaseMessage::decodeHtmlEscape(BaseMessage::getStringBetweenTag(xmlString, "domain"));
	return true;
}


