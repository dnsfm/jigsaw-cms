/*
 * $Workfile: $
 *
 * $Revision: $
 *
 * $Author: $
 *
 * $Date: $
 *
 * Copyright (c) 2004 Zhongkefulong Corporation
 */


package com.fulong.lyvc.message.generator;

import com.fulong.lyvc.message.parser.MessageDefinition;
import java.io.*;

public class JavaGenerator {

    private String outputPath;
    private String packageName;

    private static final String template =
            "///////////////////////////////\r\n" +
            "// Message definition file\r\n" +
            "// Generated by lyvc Message\r\n" +
            "///////////////////////////////\r\n" +
            "\r\n" +
            "package %packageName%;\r\n" +
            "\r\n" +
            "public class %name% extends BaseMessage{\r\n" +
            "\r\n" +
            "\tpublic static final int id = %id%;\r\n" +
            "\r\n" +
            "%declaration%\r\n" +
            "\r\n" +
            "\tpublic String toXML() {\r\n" +
            "%toXML%" +
            "\t}\r\n" +
            "\r\n" +
            "\tpublic void fromXML(String xmlString) throws MessageFormatException {\r\n" +
            "%fromXML%" +
            "\t}\r\n" +
            "\r\n" +
            "}";


    public JavaGenerator(String outputPath, String packageName) throws Exception {
        this.outputPath = outputPath;
        this.packageName = packageName;
    }

    public void generateFile(MessageDefinition definition) throws Exception {

        String filename = outputPath + "/" + definition.name + ".java";
        PrintWriter pw = new PrintWriter( new BufferedWriter(new FileWriter(filename)));

        // Make declaration
        StringBuffer sb = new StringBuffer();
        sb.append( this.generatePropertyDeclaration(definition.booleanProperties, "boolean"));
        sb.append( this.generatePropertyDeclaration(definition.dateProperties, "java.util.Date"));
        sb.append( this.generatePropertyDeclaration(definition.doubleProperties, "double"));
        sb.append( this.generatePropertyDeclaration(definition.floatProperties, "float"));
        sb.append( this.generatePropertyDeclaration(definition.i4Properties, "int"));
        sb.append( this.generatePropertyDeclaration(definition.i8Properties, "long"));
        sb.append( this.generatePropertyDeclaration(definition.stringProperties, "String"));
        String declaration = sb.toString();

        // Make toXML
        String toXML = this.generateToXmlMethod(definition);

        // Make fromXML
        String fromXML = this.generateFromXmlMethod(definition);

        // Replace template placeholder
        String output = template.replaceAll("%name%", definition.name);
        output = output.replaceAll("%packageName%", this.packageName);
        output = output.replaceAll("%id%", Integer.toString(definition.id));
        output = output.replaceAll("%declaration%", declaration);
        output = output.replaceAll("%toXML%", toXML);
        output = output.replaceAll("%fromXML%", fromXML);
        pw.println(output);
        pw.close();

        return;
    }

    public String generatePropertyDeclaration(String[] propertyNames, String type) {
        StringBuffer sb = new StringBuffer();
        for( int i=0; i<propertyNames.length; i++) {
            sb.append("\tpublic " + type + " " + propertyNames[i] + ";\r\n");
        }
        return sb.toString();
    }

    public String generateToXmlMethod(MessageDefinition definition) {
        StringBuffer sb = new StringBuffer();
        sb.append("\t\tStringBuffer xml = new StringBuffer();\r\n");
        sb.append("\t\txml.append(\"<lyvcmessage>\");\r\n");

        // id
        sb.append("\t\txml.append(\"<id>\" + id + \"</id>\");\r\n");

        // sender id
        sb.append("\t\txml.append(\"<_senderid>\" + this._senderId + \"</_senderid>\");\r\n");

        // conference id
        sb.append("\t\txml.append(\"<_conferenceid>\" + this._conferenceId + \"</_conferenceid>\");\r\n");

        for(int i=0; i<definition.booleanProperties.length; i++) {
            String beginTag = "<" + definition.booleanProperties[i] + ">";
            String endTag = "</" + definition.booleanProperties[i] + ">";
            sb.append("\t\txml.append(\"" + beginTag + "\");\r\n");
            sb.append("\t\tif( this." + definition.booleanProperties[i] + "){\r\n");
            sb.append("\t\t\txml.append(1);\r\n");
            sb.append("\t\t} else {\r\n");
            sb.append("\t\t\txml.append(0);\r\n");
            sb.append("\t\t}\r\n");
            sb.append("\t\txml.append(\"" + endTag + "\");\r\n");
        }
        for(int i=0; i<definition.dateProperties.length; i++) {
            String beginTag = "<" + definition.dateProperties[i] + ">";
            String endTag = "</" + definition.dateProperties[i] + ">";
            sb.append("\t\txml.append(\"" + beginTag + "\");\r\n");
            sb.append("\t\tif(this." + definition.dateProperties[i] + " != null) {\r\n");
            sb.append("\t\t\txml.append(this." + definition.dateProperties[i] + ".getTime());\r\n");
            sb.append("\t\t} else {\r\n");
            sb.append("\t\t\txml.append(0);\r\n");
            sb.append("\t\t}\r\n");
            sb.append("\t\txml.append(\"" + endTag + "\");\r\n");
        }
        for(int i=0; i<definition.doubleProperties.length; i++) {
            String beginTag = "<" + definition.doubleProperties[i] + ">";
            String endTag = "</" + definition.doubleProperties[i] + ">";
            sb.append("\t\txml.append(\"" + beginTag + "\" + this." + definition.doubleProperties[i] + " + \"" + endTag + "\");\r\n");
        }
        for(int i=0; i<definition.floatProperties.length; i++) {
            String beginTag = "<" + definition.floatProperties[i] + ">";
            String endTag = "</" + definition.floatProperties[i] + ">";
            sb.append("\t\txml.append(\"" + beginTag + "\" + this." + definition.floatProperties[i] + " + \"" + endTag + "\");\r\n");
        }
        for(int i=0; i<definition.i4Properties.length; i++) {
            String beginTag = "<" + definition.i4Properties[i] + ">";
            String endTag = "</" + definition.i4Properties[i] + ">";
            sb.append("\t\txml.append(\"" + beginTag + "\" + this." + definition.i4Properties[i] + " + \"" + endTag + "\");\r\n");
        }
        for(int i=0; i<definition.i8Properties.length; i++) {
            String beginTag = "<" + definition.i8Properties[i] + ">";
            String endTag = "</" + definition.i8Properties[i] + ">";
            sb.append("\t\txml.append(\"" + beginTag + "\" + this." + definition.i8Properties[i] + " + \"" + endTag + "\");\r\n");
        }
        for(int i=0; i<definition.stringProperties.length; i++) {
            String beginTag = "<" + definition.stringProperties[i] + ">";
            String endTag = "</" + definition.stringProperties[i] + ">";
            sb.append("\t\txml.append(\"" + beginTag + "\");\r\n");
            sb.append("\t\tif(this." + definition.stringProperties[i] + " != null) {\r\n");
            sb.append("\t\t\txml.append(this.encodeHtmlEscape(this." + definition.stringProperties[i] + "));\r\n");
            sb.append("\t\t}\r\n");
            sb.append("\t\txml.append(\"" + endTag + "\");\r\n");
        }
        sb.append("\t\txml.append(\"</lyvcmessage>\");\r\n");
        sb.append("\t\treturn xml.toString();\r\n");
        return sb.toString();
    }

    public String generateFromXmlMethod(MessageDefinition definition) {
        StringBuffer sb = new StringBuffer();
        sb.append("\t\tString tagContent;\r\n");
        sb.append("\t\t\r\n");

        // find senderId
        sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"_senderid\");\r\n");
        sb.append("\t\tthis._senderId = Long.parseLong(tagContent);\r\n");

        // find conferenceid
        sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"_conferenceid\");\r\n");
        sb.append("\t\tthis._conferenceId = Long.parseLong(tagContent);\r\n");

        for(int i=0; i<definition.booleanProperties.length; i++) {
            sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"" + definition.booleanProperties[i] + "\");\r\n");
            sb.append("\t\tif( tagContent.equals(\"0\")) {\r\n");
            sb.append("\t\t\tthis." + definition.booleanProperties[i] + " = false;\r\n");
            sb.append("\t\t} else {\r\n");
            sb.append("\t\t\tthis." + definition.booleanProperties[i] + " = true;\r\n");
            sb.append("\t\t}\r\n");
        }

        for(int i=0; i<definition.dateProperties.length; i++) {
            sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"" + definition.dateProperties[i] + "\");\r\n");
            sb.append("\t\tthis." + definition.dateProperties[i] + " = new java.util.Date(Long.parseLong(tagContent));\r\n");
        }

        for(int i=0; i<definition.doubleProperties.length; i++) {
            sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"" + definition.doubleProperties[i] + "\");\r\n");
            sb.append("\t\tthis." + definition.doubleProperties[i] + " = Double.parseDouble(tagContent);\r\n");
        }

        for(int i=0; i<definition.floatProperties.length; i++) {
            sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"" + definition.floatProperties[i] + "\");\r\n");
            sb.append("\t\tthis." + definition.floatProperties[i] + " = Float.parseFloat(tagContent);\r\n");
        }

        for(int i=0; i<definition.i4Properties.length; i++) {
            sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"" + definition.i4Properties[i] + "\");\r\n");
            sb.append("\t\tthis." + definition.i4Properties[i] + " = Integer.parseInt(tagContent);\r\n");
        }

        for(int i=0; i<definition.i8Properties.length; i++) {
            sb.append("\t\ttagContent = BaseMessage.getStringBetweenTag(xmlString, \"" + definition.i8Properties[i] + "\");\r\n");
            sb.append("\t\tthis." + definition.i8Properties[i] + " = Long.parseLong(tagContent);\r\n");
        }

        for(int i=0; i<definition.stringProperties.length; i++) {
            sb.append("\t\tthis." + definition.stringProperties[i] + " = BaseMessage.decodeHtmlEscape(BaseMessage.getStringBetweenTag(xmlString, \"" + definition.stringProperties[i] + "\"));\r\n");
        }

        return sb.toString();
    }
}
