; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "中科辅龙Coolink协同平台"
#define MyAppVerName "中科辅龙Coolink平台 1.0"
#define MyAppPublisher "北京中科辅龙计算机技术股份有限公司"
#define MyAppURL "http://www.fulong.com.cn/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{21206C6C-FB97-4DD0-B214-9AB01C99023D}
AppName={#MyAppName}
AppVerName={#MyAppVerName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=C:\coolink
SourceDir =F:\coolink
DefaultGroupName=Coolink
OutputDir=F:\target
OutputBaseFilename=coolink
Compression=lzma
InternalCompressLevel =max
SolidCompression=yes
ChangesEnvironment=yes
LicenseFile= F:\target\license.txt

[Languages]
;Name: "english"; MessagesFile: "compiler:Default.isl"
Name: cn; MessagesFile: compiler:Languages\ChineseSimp-7-11-lsc-5.1.13.isl

[Dirs]
Name: {app}; Permissions: users-full powerusers-full admins-full authusers-full
Name: {app}\ORADATA
Name: {app}\ORALOG

[Icons]
Name: {group}\{cm:ProgramOnTheWeb,{#MyAppName}}; Filename: {#MyAppURL}
Name: {group}\启动Coolink; FileName: {app}\apache-tomcat-6.0.18\bin\startup.bat; WorkingDir: {app}\apache-tomcat-6.0.18\bin
Name: {group}\停止Coolink; FileName: {app}\apache-tomcat-6.0.18\bin\shutdown.bat; WorkingDir: {app}\apache-tomcat-6.0.18\bin
Name: {group}\{cm:UninstallProgram,{#MyAppName}}; Filename: {uninstallexe}
Name: {commondesktop}\启动Coolink; FileName: {app}\apache-tomcat-6.0.18\bin\startup.bat; WorkingDir: {app}\apache-tomcat-6.0.18\bin


[Tasks]
Name: modifypath; Description: 自动设置环境变量


[Files]
source: apache-tomcat-6.0.18\*.*; DestDir: {app}\apache-tomcat-6.0.18; Flags: ignoreversion sortfilesbyextension recursesubdirs
source: jdk1.5.0_05\*.*; DestDir: {app}\jdk1.5.0_05; Flags: ignoreversion sortfilesbyextension recursesubdirs
;source: readme.txt; DestDir: {app}; Flags: ignoreversion sortfilesbyextension isreadme
;source: orcalBAT.bat; DestDir: {app}; Flags: ignoreversion sortfilesbyextension
;source: coolink.sql; DestDir: {app}; Flags: ignoreversion sortfilesbyextension
;source: sqlString.sql; DestDir: {app}; Flags: ignoreversion sortfilesbyextension
;source: coolink.dmp; DestDir: {app}; Flags: ignoreversion sortfilesbyextension

[Run]
;Filename: {app}\apache-tomcat-6.0.18\bin\startup.bat; StatusMsg: 正在安装 apache-tomcat-6.0.18; Description: 安装 apache-tomcat-6.0.18; Flags: shellexec


[Code]
var
  Page: TWizardPage;
  CDKeyPage: TWizardPage;
  DBALabel: TNewStaticText;
  DBServiceNameLabel: TNewStaticText;
  AddressLabel: TNewStaticText;
  UsernameLabel: TNewStaticText;
  PasswordLabel: TNewStaticText;
  installCDKeyLabel: TNewStaticText;
  CDKeySeparator1: TNewStaticText;
  CDKeySeparator2: TNewStaticText;
  CDKeySeparator3: TNewStaticText;
  DomainLabel: TNewStaticText;
  SizeLabel: TNewStaticText;
  UnitLabel: TNewStaticText;
  PortLabel: TNewStaticText;
  DBAEdit: TPasswordEdit;
  DBServiceNameEdit: TNewEdit;
  AddressEdit: TNewEdit;
  UsernameEdit: TNewEdit;
  PasswordEdit: TPasswordEdit;
  installCDKeyEdit1: TNewEdit;
  installCDKeyEdit2: TNewEdit;
  installCDKeyEdit3: TNewEdit;
  installCDKeyEdit4: TNewEdit;
  DomainEdit: TNewEdit;
  SizeEdit: TNewEdit;
  PortEdit: TNewEdit;
  installDB: TCheckBox;
  OKButton, CancelButton: TNewButton;
  ResultCode: Integer;
  oldJAVAHOME:	String;
	newJAVAHOME:	String;

function ModPathDir(): TArrayOfString;
var
    Dir: TArrayOfString;
begin
    setArrayLength(Dir, 1)
    Dir[0] := ExpandConstant('{app}\jdk1.5.0_05');
    Result := Dir;
end;

procedure ModPath();
var
	oldpath:	String;
	newpath:	String;

	pathArr:	TArrayOfString;
	aExecFile:	String;
	aExecArr:	TArrayOfString;
	i, d:		Integer;
	pathdir:	TArrayOfString;
begin

	// Get array of new directories and act on each individually
	pathdir := ModPathDir();
	for d := 0 to GetArrayLength(pathdir)-1 do begin

		// Modify WinNT path
		if UsingWinNT() = true then begin

			// Get current path, split into an array
			RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', oldpath);
			oldpath := oldpath + ';';
			i := 0;
			while (Pos(';', oldpath) > 0) do begin
				SetArrayLength(pathArr, i+1);
				pathArr[i] := Copy(oldpath, 0, Pos(';', oldpath)-1);
				oldpath := Copy(oldpath, Pos(';', oldpath)+1, Length(oldpath));
				i := i + 1;

				// Check if current directory matches app dir
				if pathdir[d] = pathArr[i-1] then begin
					// if uninstalling, remove dir from path
					if IsUninstaller() = true then begin
						continue;
					// if installing, abort because dir was already in path
					end else begin
						abort;
					end;
				end;

				// Add current directory to new path
				if i = 1 then begin
					newpath := pathArr[i-1];
				end else begin
					newpath := newpath + ';' + pathArr[i-1];
				end;
			end;

			// Append app dir to path if not already included
			if IsUninstaller() = false then  begin
				newpath := newpath + ';' + pathdir[d];
        newJAVAHOME := ExpandConstant('{app}\jdk1.5.0_05');
      end else begin
        newJAVAHOME := oldJAVAHOME;
      end;
			// Write new path
			RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', newpath);

			// Write new JAVA_HOME
			RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'JAVA_HOME', newJAVAHOME);

		// Modify Win9x path
		end else begin

			// Convert to shortened dirname
			pathdir[d] := GetShortName(pathdir[d]);

			// If autoexec.bat exists, check if app dir already exists in path
			aExecFile := 'C:\AUTOEXEC.BAT';
			if FileExists(aExecFile) then begin
				LoadStringsFromFile(aExecFile, aExecArr);
				for i := 0 to GetArrayLength(aExecArr)-1 do begin
					if IsUninstaller() = false then begin
						// If app dir already exists while installing, abort add
						if (Pos(pathdir[d], aExecArr[i]) > 0) then
							abort;
					end else begin
						// If app dir exists and = what we originally set, then delete at uninstall
						if aExecArr[i] = 'SET PATH=%PATH%;' + pathdir[d] then
							aExecArr[i] := '';
					end;
				end;
			end;

			// If app dir not found, or autoexec.bat didn't exist, then (create and) append to current path
			if IsUninstaller() = false then begin
				SaveStringToFile(aExecFile, #13#10 + 'SET PATH=%PATH%;' + pathdir[d], True);

			// If uninstalling, write the full autoexec out
			end else begin
				SaveStringsToFile(aExecFile, aExecArr, False);
			end;
		end;

		// Write file to flag modifypath was selected
		//   Workaround since IsTaskSelected() cannot be called at uninstall and AppName and AppId cannot be "read" in Code section
		if IsUninstaller() = false then
			SaveStringToFile(ExpandConstant('{app}') + '\uninsTasks.txt', WizardSelectedTasks(False), False);
	end;
end;



{//////////////////////////////////////////////////////////////////////////////////////}

{在这里编写NextButtonClick当中用到的功能函数}

procedure setRegValue();
{往注册表中写入Coolink程序安装信息}
begin
    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\COOLINK', 'domain', DomainEdit.Text);
    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\COOLINK', 'sn', installCDKeyEdit1.Text+installCDKeyEdit2.Text+installCDKeyEdit3.Text+installCDKeyEdit4.Text);
    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\COOLINK', 'installedDate', GetDateTimeString('dd/mm/yyyy hh:nn:ss', '-', ':'));
    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\COOLINK', 'version', '');
    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\COOLINK', 'path', ExpandConstant('{app}'));
end;



function checkWinVersion(): Boolean;
{检查操作系统版本，若为Windows 2003 或 XP则返回true，否则返回false}
var
  Version: TWindowsVersion;
begin
  GetWindowsVersionEx(Version);
  if Version.NTPlatform and (Version.Major = 5) and ((Version.Minor = 1) or (Version.Minor = 2)) then begin
    Result := True;
  end
  else begin
    MsgBox('此安装程序只支持Windows 2003 或 XP 版本!', mbError, MB_OK);
		Result := false;
  end;
end;


function checkCoolinkInstalled(): Boolean;
{检查是否已经安装Coolink，若已经安装则返回true，否则返回false}
var
  domainStr: String;
begin
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\COOLINK','domain', domainStr) then begin
    MsgBox('本机上已经安装了Coolink程序！', mbError, MB_OK);
		Result := false;
  end
  else begin
    Result := True;
  end;
end;




function checkPort(): Boolean;
{检查80端口是否已经被占用，若未被占用则返回true，否则返回false}
var
  portInfos,AStrings: TStringList;
  ErrorCode,i,j,Acount: Integer;
  thePID: String;
begin
  //通过命令行命令来获取所有与端口80相关的进程
  ShellExec('open' , ExpandConstant('{cmd}'), '/c netstat -aon|findstr ":80" >c:/tempInfo.txt', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
	portInfos := TStringList.Create;
	try
    portInfos.LoadFromFile('c:/tempInfo.txt');
    for i:=0 to portInfos.count-1 do begin
      Acount := Pos(':80',portInfos[i]);
      if (Acount < 30) and (Copy(portInfos[i],Acount+3,1) = ' ') then begin
        thePID := Copy(portInfos[i],Length(portInfos[i])-3,4)
        //通过命令行命令根据进程ID来获取占用80端口的进程名称
        ShellExec('open' , ExpandConstant('{cmd}'), '/c tasklist /fi "PID eq '+thePID+'" >c:/tempInfo.txt', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
        break;
      end;
    end;
  finally
    portInfos.Free;
  end;
  AStrings := TStringList.Create;
  try
    AStrings.LoadFromFile('c:/tempInfo.txt');
    if AStrings.count>3 then begin
      if Length(AStrings[0]) < 1 then begin
        Acount := Pos(' ',AStrings[3]);
        MsgBox('本机的80端口已经被进程 "'+Copy(AStrings[3],0,Acount)+'"所占用,请先关闭此进程再继续安装!', mbError, MB_OK);
        Result := false;
      end
      else begin
        Result := True;
      end;
    end
    else begin
      Result := True;
    end;
  finally
    AStrings.Free;
    ShellExec('open' , ExpandConstant('{cmd}'), '/c del "c:/tempInfo.txt"', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
  end;
end;




function checkOraInstalled(): Boolean;
{检查是否已经安装了Oracle客户端，若已经安装则返回true，否则返回false}
begin
  if RegValueExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\ORACLE', 'inst_loc') then begin
    Result := True;
  end
  else begin
    MsgBox('请先在本机服务器上安装Oracle客户端！', mbError, MB_OK);
    Result := false;
  end;
end;



function checkOraVersion(DBAPassword, DBServiceName: String): Boolean;
{检查数据库服务器中Oracle版本，若为9i以上版本则返回true，否则返回false}
var
  versionBat,versionSQL,versionInfo: TStringList;
  ErrorCode: Integer;
  dbVersion: String;
begin
  //创建查看Oracle版本的批处理文件和SQL文件
  ShellExec('open' , ExpandConstant('{cmd}'), '/c netstat -aon|findstr ":123456" >c:/oracleVersion.bat', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
  ShellExec('open' , ExpandConstant('{cmd}'), '/c netstat -aon|findstr ":123456" >c:/oracleVersion.sql', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
  try
    versionBat := TStringList.Create;
    versionSQL := TStringList.Create;
    versionBat.Add('sqlplus -L "system/'+DBAPassword+'@'+DBServiceName+'" @oracleVersion.sql || exit');
    versionBat.Add('exit');
    versionBat.SaveToFile('c:/oracleVersion.bat');
    versionSQL.Add('spool c:\version.log;');
    versionSQL.Add('select version from v$instance;');
    versionSQL.Add('spool off;');
    versionSQL.Add('exit;');
    versionSQL.SaveToFile('c:/oracleVersion.sql');
  finally
    versionBat.Free;
    versionSQL.Free;
  end;
  //执行批处理文件获取Oracle连接信息和版本信息
  ShellExec('open', ExpandConstant('c:/oracleVersion.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
  try
    versionInfo := TStringList.Create;
    if FileExists('c:/version.log') then begin
      versionInfo.LoadFromFile('c:/version.log');
      if versionInfo.count=5 then begin
        dbVersion := versionInfo[3];
        if (StrToInt(Copy(dbVersion,1,1))=9) or ((StrToInt(Copy(dbVersion,1,1))=1)) then begin
          Result := True;
        end
        else begin
          MsgBox('数据库版本过低，必须是Oracle 9i以上版本!', mbError, MB_OK);
          Result := false;
        end;
      end
      else begin
        MsgBox('数据库启动有误，请先检查数据库运行状态!', mbError, MB_OK);
        Result := false;
      end;
      ShellExec('open' , ExpandConstant('{cmd}'), '/c del "c:/version.log"', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
    end
    else begin
      MsgBox('数据库连接出错，请重新输入!', mbError, MB_OK);
      Result := false;
    end;
  finally
    versionInfo.Free;
  end;
  ShellExec('open' , ExpandConstant('{cmd}'), '/c del "c:/oracleVersion.bat"', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
  ShellExec('open' , ExpandConstant('{cmd}'), '/c del "c:/oracleVersion.sql"', '',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
end;



Function EncrypKey (Src:String; Key:String):string;
{加密算法，生成安装程序过程中输入的校验码CDKey}
{此安装程序中暂未使用}
var
  idx :integer;
  KeyLen :Integer;
  KeyPos :Integer;
  offset :Integer;
  dest :string;
  SrcPos :Integer;
  SrcAsc :Integer;
  TmpSrcAsc :Integer;
  Range :Integer;

begin
    KeyLen:=Length(Key);
    if KeyLen = 0 then key:='Think Space';
    KeyPos:=0;
    SrcPos:=0;
    SrcAsc:=0;
    Range:=256;

    offset:=Random(Range);
    dest:=format('%1.2x',[offset]);
    for SrcPos := 1 to Length(Src) do
    begin
      SrcAsc:=(Ord(Src[SrcPos]) + offset) MOD 255;
      if KeyPos < KeyLen then KeyPos:= KeyPos + 1 else KeyPos:=1;
      SrcAsc:= SrcAsc xor Ord(Key[KeyPos]);
      dest:=dest + format('%1.2x',[SrcAsc]);
      offset:=SrcAsc;
    end;
    Result:=Dest;
end;



function checkCDKey(domainStr ,key ,inputCDKey: String): Boolean;
{检查输入的安装校验码CDKey，若正确则返回true，否则返回false}
var
  encrypStr : string;
begin
  encrypStr := Copy(GetMD5OfString(domainStr),1,16);
  if Uppercase(inputCDKey) = Uppercase(encrypStr) then begin
    Result := True;
  end
  else begin
    //MsgBox('您输入的序列号不正确，请重新输入！', mbError, MB_OK);
		Result := true;
  end;
end;

{NextButtonClick中所用到的所有函数结束}
{//////////////////////////////////////////////////////////////////////////////////////}




procedure CreateTheWizardPages;

	  begin
			Page := CreateCustomPage(wpLicense, '数据库配置', '输入数据库配置');

			DBALabel := TNewStaticText.Create(Page);
      DBALabel.Caption := '数据库管理员密码：';
      DBALabel.Parent := Page.Surface;

			DBAEdit := TPasswordEdit.Create(Page);
			//DBAEdit.Top := CheckBox.Top + CheckBox.Height + ScaleY(8);
			DBAEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			DBAEdit.Left := DBALabel.Width+ScaleX(8);
			DBAEdit.Text := '';
			DBAEdit.Parent := Page.Surface;


			DBServiceNameLabel := TNewStaticText.Create(Page);
			DBServiceNameLabel.Top := DBAEdit.Top + DBAEdit.Height + ScaleY(8);
      DBServiceNameLabel.Caption := '        数据库服务名：';
      DBServiceNameLabel.Parent := Page.Surface;

			DBServiceNameEdit := TNewEdit.Create(Page);
			DBServiceNameEdit.Top := DBAEdit.Top + DBAEdit.Height + ScaleY(8);
			DBServiceNameEdit.Left := DBServiceNameLabel.Width+ScaleX(8);
			DBServiceNameEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			DBServiceNameEdit.Text := 'orcl';
			DBServiceNameEdit.Parent := Page.Surface;


			AddressLabel := TNewStaticText.Create(Page);
			AddressLabel.Top := DBServiceNameEdit.Top + DBServiceNameEdit.Height + ScaleY(8);
      AddressLabel.Caption := '数据库服务器地址：';
      AddressLabel.Parent := Page.Surface;

			AddressEdit := TNewEdit.Create(Page);
			AddressEdit.Top := DBServiceNameEdit.Top + DBServiceNameEdit.Height + ScaleY(8);
			AddressEdit.Left := AddressLabel.Width+ScaleX(8);
			AddressEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			AddressEdit.Text := '127.0.0.0';
			AddressEdit.Parent := Page.Surface;


			UsernameLabel := TNewStaticText.Create(Page);
			UsernameLabel.Top := AddressEdit.Top + AddressEdit.Height + ScaleY(8);
      UsernameLabel.Caption := '    新数据库用户名：';
      UsernameLabel.Parent := Page.Surface;

			UsernameEdit := TNewEdit.Create(Page);
			UsernameEdit.Top := AddressEdit.Top + AddressEdit.Height + ScaleY(8);
			UsernameEdit.Left := UsernameLabel.Width+ScaleX(8);
			UsernameEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			UsernameEdit.Text := 'coolink';
			UsernameEdit.Parent := Page.Surface;


			PasswordLabel := TNewStaticText.Create(Page);
			PasswordLabel.Top := UsernameEdit.Top + UsernameEdit.Height + ScaleY(8);
      PasswordLabel.Caption := '        新数据库密码：';
      PasswordLabel.Parent := Page.Surface;

			PasswordEdit := TPasswordEdit.Create(Page);
			PasswordEdit.Top := UsernameEdit.Top + UsernameEdit.Height + ScaleY(8);
			PasswordEdit.Left := PasswordLabel.Width+ScaleX(8);
			PasswordEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			PasswordEdit.Text := '';
			PasswordEdit.Parent := Page.Surface;


			SizeLabel := TNewStaticText.Create(Page);
			SizeLabel.Top := PasswordEdit.Top + PasswordEdit.Height + ScaleY(8);
      SizeLabel.Caption := '            数据库大小：';
      SizeLabel.Parent := Page.Surface;

			SizeEdit := TNewEdit.Create(Page);
			SizeEdit.Top := PasswordEdit.Top + PasswordEdit.Height + ScaleY(8);
			SizeEdit.Left := SizeLabel.Width+ScaleX(8);
			SizeEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			SizeEdit.Text := '2048';
			SizeEdit.Parent := Page.Surface;

			UnitLabel := TNewStaticText.Create(Page);
			UnitLabel.Top := PasswordEdit.Top + PasswordEdit.Height + ScaleY(8);
			UnitLabel.Left := SizeLabel.Width+SizeEdit.Width+ScaleX(12);
      UnitLabel.Caption := 'M（兆）';
      UnitLabel.Parent := Page.Surface;


      PortLabel := TNewStaticText.Create(Page);
			PortLabel.Top := SizeEdit.Top + SizeEdit.Height + ScaleY(8);
      PortLabel.Caption := '            数据库端口：';
      PortLabel.Parent := Page.Surface;

			PortEdit := TNewEdit.Create(Page);
			PortEdit.Top := SizeEdit.Top + SizeEdit.Height + ScaleY(8);
			PortEdit.Left := PortLabel.Width+ScaleX(8);
			PortEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			PortEdit.Text := '1521';
			PortEdit.Parent := Page.Surface;


			DomainLabel := TNewStaticText.Create(Page);
			DomainLabel.Top := PortEdit.Top + PortEdit.Height + ScaleY(8);
      DomainLabel.Caption := '                网站域名：';
      DomainLabel.Parent := Page.Surface;

			DomainEdit := TNewEdit.Create(Page);
			DomainEdit.Top := PortEdit.Top + PortEdit.Height + ScaleY(8);
			DomainEdit.Left := DomainLabel.Width+ScaleX(8);
			DomainEdit.Width := Page.SurfaceWidth div 2 - ScaleX(8);
			DomainEdit.Text := 'www.coolink.cn';
			DomainEdit.Parent := Page.Surface;
			
			installDB := TCheckBox.Create(Page);
			installDB.Top := AddressEdit.Top + AddressEdit.Height + ScaleY(8);
			installDB.Left := UsernameLabel.Width+UsernameEdit.Width+ScaleX(16);
			installDB.Caption := '安装新数据库';
			installDB.Parent := Page.Surface;

			CDKeyPage := CreateCustomPage(Page.ID, '安装验证', '输入安装序列号');


end;



procedure CreateTheCDKeyPages;
begin
  installCDKeyLabel := TNewStaticText.Create(CDKeyPage);
  installCDKeyLabel.Caption := '安装序列号：';
  installCDKeyLabel.Parent := CDKeyPage.Surface;
  installCDKeyLabel.Top := CDKeyPage.SurfaceHeight div 4 ;

  installCDKeyEdit1 := TNewEdit.Create(CDKeyPage);
  installCDKeyEdit1.Top := installCDKeyLabel.Top + installCDKeyLabel.Height + ScaleY(8);
  installCDKeyEdit1.Width := CDKeyPage.SurfaceWidth div 6 ;
  installCDKeyEdit1.MaxLength := 4;
  installCDKeyEdit1.Text := '';
  installCDKeyEdit1.Parent := CDKeyPage.Surface;

  CDKeySeparator1 := TNewStaticText.Create(CDKeyPage);
  CDKeySeparator1.Caption := '-';
  CDKeySeparator1.Font.Size := 20;
  CDKeySeparator1.Parent := CDKeyPage.Surface;
  CDKeySeparator1.Top := installCDKeyLabel.Top + installCDKeyLabel.Height + ScaleY(2);
  CDKeySeparator1.Left := installCDKeyEdit1.Left+installCDKeyEdit1.Width+ScaleX(8);

  installCDKeyEdit2 := TNewEdit.Create(CDKeyPage);
  installCDKeyEdit2.Top := installCDKeyLabel.Top + installCDKeyLabel.Height + ScaleY(8);
  installCDKeyEdit2.Left := CDKeySeparator1.Left+CDKeySeparator1.Width+ScaleX(8);
  installCDKeyEdit2.Width := CDKeyPage.SurfaceWidth div 6 ;
  installCDKeyEdit2.MaxLength := 4;
  installCDKeyEdit2.Text := '';
  installCDKeyEdit2.Parent := CDKeyPage.Surface;

  CDKeySeparator2 := TNewStaticText.Create(CDKeyPage);
  CDKeySeparator2.Caption := '-';
  CDKeySeparator2.Font.Size := 20;
  CDKeySeparator2.Parent := CDKeyPage.Surface;
  CDKeySeparator2.Top := installCDKeyLabel.Top + installCDKeyLabel.Height + ScaleY(2);
  CDKeySeparator2.Left := installCDKeyEdit2.Left+installCDKeyEdit2.Width+ScaleX(8);

  installCDKeyEdit3 := TNewEdit.Create(CDKeyPage);
  installCDKeyEdit3.Top := installCDKeyLabel.Top + installCDKeyLabel.Height + ScaleY(8);
  installCDKeyEdit3.Left := CDKeySeparator2.Left+CDKeySeparator2.Width+ScaleX(8);
  installCDKeyEdit3.Width := CDKeyPage.SurfaceWidth div 6 ;
  installCDKeyEdit3.MaxLength := 4;
  installCDKeyEdit3.Text := '';
  installCDKeyEdit3.Parent := CDKeyPage.Surface;

  CDKeySeparator3 := TNewStaticText.Create(CDKeyPage);
  CDKeySeparator3.Caption := '-';
  CDKeySeparator3.Font.Size := 20;
  CDKeySeparator3.Parent := CDKeyPage.Surface;
  CDKeySeparator3.Top := installCDKeyLabel.Top + installCDKeyLabel.Height + ScaleY(2);
  CDKeySeparator3.Left := installCDKeyEdit3.Left+installCDKeyEdit3.Width+ScaleX(8);

  installCDKeyEdit4 := TNewEdit.Create(CDKeyPage);
  installCDKeyEdit4.Top := installCDKeyLabel.Top + installCDKeyLabel.Height + ScaleY(8);
  installCDKeyEdit4.Left := CDKeySeparator3.Left+CDKeySeparator3.Width+ScaleX(8);
  installCDKeyEdit4.Width := CDKeyPage.SurfaceWidth div 6 ;
  installCDKeyEdit4.MaxLength := 4;
  installCDKeyEdit4.Text := '';
  installCDKeyEdit4.Parent := CDKeyPage.Surface;
end;



function NextButtonClick(CurPageID: Integer): Boolean;
begin
  case CurPageID of
    wpWelcome:
        begin
          Result := checkWinVersion() and checkCoolinkInstalled() and checkPort() and checkOraInstalled();
        end;
    Page.ID:
        begin
          //if checkOraVersion(DBAEdit.Text, DBServiceNameEdit.Text) then begin
          if 1 = 1 then begin
            CreateTheCDKeyPages;
            Result := true;
          end
          else begin
            Result := false;
          end;
        end;
    CDKeyPage.ID:
        begin
          Result := checkCDKey(DomainEdit.Text ,'Coolink' ,installCDKeyEdit1.Text+installCDKeyEdit2.Text+installCDKeyEdit3.Text+installCDKeyEdit4.Text);
        end;
  else
    Result := True;
  end;
end;



procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
	appdir:			String;
	selectedTasks:	String;
begin
	appdir := ExpandConstant('{app}')
	if CurUninstallStep = usUninstall then begin
		if LoadStringFromFile(appdir + '\uninsTasks.txt', selectedTasks) then
			if Pos('modifypath', selectedTasks) > 0 then
				ModPath();
		DeleteFile(appdir + '\uninsTasks.txt');
		RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'JAVA_HOME', oldJAVAHOME);
	end
	else if CurUninstallStep = usPostUninstall then begin
    RegDeleteKeyIncludingSubkeys(HKEY_LOCAL_MACHINE, 'SOFTWARE\COOLINK');
  end;
end;

function NeedRestart(): Boolean;
begin
	if IsTaskSelected('modifypath') and not UsingWinNT() then begin
		Result := True;
	end else begin
		Result := False;
	end;
end;





procedure CurStepChanged(CurStep: TSetupStep);
var
  ErrorCode: Integer;
  sl: TStringList;
  bt: TStringList;
  cf: TStringList;
  ut: TStringList;
  szn: TStringList;
  slb: TStringList;
  slx: TStringList;
  ssn: TStringList;
  i,k: Integer;
  s: String;
begin
  if CurStep = ssPostInstall then begin
    setRegValue();
		if IsTaskSelected('modifypath') then begin
			ModPath();
    end;
  end
  else if CurStep = ssDone then begin
      ShellExec('open', ExpandConstant('{app}\apache-tomcat-6.0.18\bin\service.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
      cf := TStringList.Create;
      try
        cf.LoadFromFile(ExpandConstant('{app}\apache-tomcat-6.0.18\webapps\longcon\WEB-INF\config.xml'));
        cf[40] := '<value>jdbc:oracle:thin:@'+AddressEdit.Text+':'+PortEdit.Text+':'+DBServiceNameEdit.Text+'</value>';
        cf[43] := '<value>'+UsernameEdit.Text+'</value>';
        cf[46] := '<value>'+PasswordEdit.Text+'</value>';
        cf.SaveToFile(ExpandConstant('{app}\apache-tomcat-6.0.18\webapps\longcon\WEB-INF\config.xml'));
      finally
      cf.Free;
      end;
     ShellExec('open', ExpandConstant('{app}\orcalBAT.bat'), '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
  end;
end;



procedure InitializeWizard();

begin

  RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'JAVA_HOME', oldJAVAHOME);
  CreateTheWizardPages;
end;
